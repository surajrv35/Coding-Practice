/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 Time=O(N)=space
class Solution {
    
    public List<List<Integer>> verticalOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        
        if (root == null) 
            return result;
        
        Queue<TreeNode> q = new LinkedList<>();
        Queue<Integer> cols= new LinkedList<>();
        q.offer(root); cols.add(0);
        int minHd = 0;
        int maxHd = 0;
        HashMap<Integer, List<Integer>> map = new HashMap<>();
        while (!q.isEmpty()) {
            TreeNode cur = q.poll();
            int col=cols.poll();
            map.putIfAbsent(col, new ArrayList<>());
            map.get(col).add(cur.val);
            if (cur.left != null) {
                q.offer(cur.left);
                cols.add(col-1);
                minHd = Math.min(minHd, col-1);
            }
            if (cur.right != null) {
                q.offer(cur.right);
                cols.add(col+1);
                maxHd = Math.max(maxHd, col+1);
            }
        }
        
        for(int i=minHd;i<=maxHd;i++) {
            result.add(map.get(i));
        }
        return result;
    }
}
/*---------------------DFS--------------*/
Time=O(W.HlogH) space=O(N)
// class Solution {
//   Map<Integer, ArrayList<Pair<Integer, Integer>>> columnTable = new HashMap();
//   int minColumn = 0, maxColumn = 0;

//   private void DFS(TreeNode node, Integer row, Integer column) {
//     if (node == null)
//       return;

//     if (!columnTable.containsKey(column)) {
//       this.columnTable.put(column, new ArrayList<Pair<Integer, Integer>>());
//     }

//     this.columnTable.get(column).add(new Pair<Integer, Integer>(row, node.val));
//     this.minColumn = Math.min(minColumn, column);
//     this.maxColumn = Math.max(maxColumn, column);
//     // preorder DFS traversal
//     this.DFS(node.left, row + 1, column - 1);
//     this.DFS(node.right, row + 1, column + 1);
//   }

//   public List<List<Integer>> verticalOrder(TreeNode root) {
//     List<List<Integer>> output = new ArrayList();
//     if (root == null) {
//       return output;
//     }

//     this.DFS(root, 0, 0);

//     // Retrieve the resuts, by ordering by column and sorting by row
//     for (int i = minColumn; i < maxColumn + 1; ++i) {

//       Collections.sort(columnTable.get(i), new Comparator<Pair<Integer, Integer>>() {
//         @Override
//         public int compare(Pair<Integer, Integer> p1, Pair<Integer, Integer> p2) {
//           return p1.getKey() - p2.getKey();
//         }
//       });

//       List<Integer> sortedColumn = new ArrayList();
//       for (Pair<Integer, Integer> p : columnTable.get(i)) {
//         sortedColumn.add(p.getValue());
//       }
//       output.add(sortedColumn);
//     }

//     return output;
//   }
// }
